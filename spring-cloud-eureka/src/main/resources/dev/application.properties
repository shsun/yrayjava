#
spring.application.name=spring.cloud.eureka
server.port=1111
management.port=1112
#
eureka.client.serviceUrl.defaultZone=http://127.0.0.1:1111/eureka/
eureka.instance.prefer-ip-address=false
#just use the ip address
eureka.instance.hostname=127.0.0.1
#
#Indicates how often(in seconds) to fetch the registry information from the eureka\n server.
eureka.client.registry-fetch-interval-seconds=5
#Indicates the time in seconds that the eureka server waits since it received the\n last heartbeat before it can remove this instance from its view and there by\n disallowing traffic to this instance.\n\n Setting this value too long could mean that the traffic could be routed to the\n instance even though the instance is not alive. Setting this value too small could\n mean, the instance may be taken out of traffic because of temporary network\n glitches.This value to be set to atleast higher than the value specified in\n leaseRenewalIntervalInSeconds.
eureka.instance.lease-expiration-duration-in-seconds=10
#Indicates how often (in seconds) the eureka client needs to send heartbeats to\n eureka server to indicate that it is still alive. If the heartbeats are not\n received for the period specified in leaseExpirationDurationInSeconds, eureka\n server will remove the instance from its view, there by disallowing traffic to this\n instance.\n\n Note that the instance could still not take traffic if it implements\n HealthCheckCallback and then decides to make itself unavailable.
eureka.instance.lease-renewal-interval-in-seconds=5
#当Eureka Server节点在短时间内丢失过多客户端时（可能发生了网络分区故障），那么这个节点就会进入自我保护模式
eureka.server.enable-self-preservation=true
#eureka server清理无效节点的时间间隔
eureka.server.eviction-interval-timer-in-ms=5000
#
eureka.server.response-cache-update-interval-ms=5000
#Indicates how long initially (in seconds) to replicate instance info to the eureka\n server
eureka.client.initial-instance-info-replication-interval-seconds=5
#Indicates how often(in seconds) to poll for changes to eureka server information.\n Eureka servers could be added or removed and this setting controls how soon the\n eureka clients should know about it.
eureka.client.eureka-service-url-poll-interval-seconds=5
#
# TODO
# https://blog.csdn.net/zzp448561636/article/details/70198878
# 在默认设置下，Eureka服务注册中心也会将自己作为客户端来尝试注册它自己，所以我们需要禁用它的客户端注册行为
# 如果不禁止的话，会得到如下错误：
# com.sun.jersey.api.client.ClientHandlerException: java.net.ConnectException: Connection refused: connect
# 应该是因为当注册中心将自己作为客户端注册的时候，发现在server上的端口被自己占据了，然后就挂了。
#如果要开启自动注册的话，可以启动两个server，互相注册
# A：eureka.client.serviceUrl.defaultZone=http://localhost:1112/eureka/
# B：eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/
eureka.client.register-with-eureka=false
eureka.client.fetch-registry=false
#
# timeout
default.readTimeout=10000
default.connectTimeout=10000
#
#timeout for restTemplate
spring.rest.connection.connection-request-timeout=${default.connectTimeout}
spring.rest.connection.connect-timeout=${default.connectTimeout}
spring.rest.connection.read-timeout=${default.readTimeout}
#
#timeout fegin request
spring.fegin.request.connectTimeoutMillis=${default.connectTimeout}
spring.fegin.request.readTimeoutMillis=${default.readTimeout}
#
spring.cloud.config.server.git.uri=https://github.com/chxfantasy/spring-cloud-demo-config
#spring.cloud.config.server.git.username=XXXX
#spring.cloud.config.server.git.password=XXXX
spring.cloud.config.server.git.search-paths=/app
#spring.cloud.config.server.prefix=/config
#
management.security.enabled=false
#
a=hihihihidebug